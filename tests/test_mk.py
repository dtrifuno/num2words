# -*- coding: utf-8 -*-
# Copyright (c) 2003, Taro Ogawa.  All Rights Reserved.
# Copyright (c) 2013, Savoir-faire Linux inc.  All Rights Reserved.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA

from __future__ import unicode_literals

from unittest import TestCase

from num2words import num2words


class Num2WordsMKTest(TestCase):
    def test_cardinal(self):
        testcases = [
            ("пет", 5, {}),
            ("петнаесет", 15, {}),
            ("дваесет и еден", 21, {"gender": "m"}),
            ("дваесет и две", 22, {"gender": "n"}),
            ("триесет и пет", 35, {}),
            ("минус четириесет и четири", -44, {}),
            ("сто", 100, {"gender": "m"}),
            ("сто и едно", 101, {"gender": "n"}),
            ("сто и десет", 110, {}),
            ("сто и петнаесет", 115, {}),
            ("минус сто дваесет и три", -123, {"gender": "f"}),
            ("сто педесет и четири", 154, {}),
            ("триста дваесет и пет", 325, {}),
            ("петстотини дваесет и осум", 528, {"gender": "f"}),
            ("илјада", 1000, {"gender": "n"}),
            ("илјада и една", 1001, {"gender": "f"}),
            ("илјада и дваесет", 1020, {}),
            ("илјада дваесет и пет", 1025, {}),
            ("илјада сто триесет и пет", 1135, {"gender": "m"}),
            ("две илјади и дванаесет", 2012, {}),
            ("седум илјади двесте дваесет и три", 7223, {}),
            (
                "четиристотини и осумнаесет илјади петстотини триесет и еден",
                418_531,
                {},
            ),
            ("милион илјада сто триесет и девет", 1_001_139, {}),
            (
                "дванаесет милиони триста триесет и две илјади "
                "седумстотини осумдесет и девет",
                12_332_789,
                {},
            ),
            (
                "двесте и педесет милиони "
                "седумстотини дваесет и пет илјади "
                "деветстотини триесет и пет",
                250_725_935,
                {},
            ),
            (
                "триста осумдесет и еден милион "
                "четиристотини и една илјада "
                "сто педесет и два",
                381_401_152,
                {},
            ),
            (
                "милијарда "
                "двесте триесет и четири милиони "
                "петстотини шеесет и седум илјади "
                "осумстотини и деведесет",
                1_234_567_890,
                {},
            ),
            (
                "трилион "
                "двесте триесет и четири билијарди "
                "петстотини шеесет и седум билиони "
                "осумстотини и деведесет милијарди "
                "деветстотини осумдесет и седум милиони "
                "шестотини педесет и четири илјади "
                "триста дваесет и едно",
                1_234_567_890_987_654_321,
                {"gender": "n"},
            ),
            (
                "двесте и петнаесет квинтилиони "
                "четиристотини шеесет и една квадрилијарда "
                "четиристотини и седум квадрилиони "
                "осумстотини деведесет и две трилијарди "
                "триесет и девет трилиони "
                "две билијарди "
                "сто педесет и седум билиони "
                "сто осумдесет и девет милијарди "
                "осумстотини осумдесет и три милиони "
                "деветстотини и една илјада "
                "шестотини седумдесет и шест",
                215_461_407_892_039_002_157_189_883_901_676,
                {},
            ),
            (
                "седумстотини и деветнаесет квинтилиони "
                "деведесет квадрилијарди "
                "двесте триесет и четири квадрилиони "
                "шестотини деведесет и три трилијарди "
                "шестотини шеесет и еден трилион "
                "триесет и четири билијарди "
                "осумстотини и дваесет билиони "
                "осумстотини и четиринаесет милијарди "
                "триста осумдесет и еден милион "
                "двесте и дваесет илјади "
                "двесте деведесет и две",
                719_090_234_693_661_034_820_814_381_220_292,
                {"gender": "f"},
            ),
        ]

        for expected, number, kwargs in testcases:
            self.assertEqual(expected, num2words(number, lang="mk", **kwargs))

    def test_floating_point(self):
        testcases = [
            # minus
            ("пет запирка два", 5.2, {}),
            ("десет запирка нула два", 10.02, {}),
            ("петнаесет запирка нула нула седум", 15.007, {}),
            (
                "петстотини шеесет и една запирка четириесет и две",
                561.42,
                {"gender": "f"},
            ),
            (
                "дванаесет илјади петстотини и деветнаесет "
                "запирка осумдесет и пет",
                12519.85,
                {},
            ),
        ]

        for expected, number, kwargs in testcases:
            self.assertEqual(expected, num2words(number, lang="mk", **kwargs))

    def test_to_ordinal(self):
        testcases = [
            ("единаесетта", 11, "f"),
            ("дванаесетти", 12, "m"),
            ("дваесетто", 20, "n"),
            ("дваесет и прво", 21, "n"),
            ("дваесет и втор", 22, "m"),
            ("триесетта", 30, "f"),
            ("четириесет и четврта", 44, "f"),
            ("сто и прв", 101, "m"),
            ("сто дваесет и трето", 123, "n"),
            ("двестота", 200, "f"),
            ("триста дваесет и петти", 325, "m"),
            ("илјада двесте четириесет и трето", 1243, "n"),
            ("пет илјади триста дваесет и трета", 5323, "f"),
            ("шест илјадит", 6000, "m"),
            ("тринаесет илјади и петто", 13_005, "n"),
            ("педесет и четири илјади и тринаесетта", 54_013, "f"),
            ("три милионит", 3_000_000, "m"),
            ("седум милиони и дванаесетто", 7_000_012, "n"),
            (
                "петстотини и шеснаесет милиони "
                "триста и дванаесет илјади и деветнаесетто",
                516_312_019,
                "n",
            ),
        ]

        for expected, number, gender in testcases:
            self.assertEqual(
                expected,
                num2words(number, lang="mk", to="ordinal", gender=gender),
            )

    def test_to_ordinal_num(self):
        testcases = [
            ("1-ва", 1, "f"),
            ("1-рв", 1, "m"),
            ("2-ро", 2, "n"),
            ("7-мо", 7, "n"),
            ("12-ти", 12, "m"),
            ("18-та", 18, "f"),
            ("23-та", 23, "f"),
            ("25-ти", 25, "m"),
            ("101-во", 101, "n"),
        ]

        for expected, number, gender in testcases:
            self.assertEqual(
                expected,
                num2words(number, lang="mk", to="ordinal_num", gender=gender),
            )

    def test_to_year(self):
        testcases = [
            ("прва", 1),
            ("седумнаесетта", 17),
            ("шеесет и седма", 67),
            ("шестотини четириесет и деветта", 649),
            ("илјада осумстота", 1800),
            ("илјада деветстотини и трета", 1903),
            ("илјада деветстотини деведесет и прва", 1991),
            ("две илјади дваесет и трета", 2023),
            ("две илјади тристота", 2300),
            ("седум илјади деветстотини осумдесет и шестта", 7986),
        ]

        for expected, number in testcases:
            self.assertEqual(expected, num2words(number, lang="mk", to="year"))

    def test_to_currency(self):
        testcases = [
            ("едно евро, нула центи", 1.0, "EUR", {}),
            ("две евра, нула центи", 2.0, "EUR", {}),
            ("две евра, еден цент", 2.01, "EUR", {}),
            ("две евра, пет центи", 2.05, "EUR", {}),
            ("две евра, десет центи", 2.1, "EUR", {}),
            ("пет евра, нула центи", 5.0, "EUR", {}),
            ("дваесет и едно евро, дваесет и два центи", 21.22, "EUR", {}),
            ("триесет и осум евра, четириесет центи", 38.4, "EUR", {}),
            ("сто и едно евро, дваесет и еден цент", 101.21, "EUR", {}),
            (
                "минус илјада двесте триесет и четири евра, "
                "педесет и шест центи",
                -1234.56,
                "EUR",
                {},
            ),
            (
                "десет илјади сто и единаесет евра и нула центи",
                10_111.0,
                "EUR",
                {"separator": " и"},
            ),
            (
                "два милиони шестотини педесет и една илјада "
                "деветстотини и едно евро, 69 центи",
                2_651_901.69,
                "EUR",
                {"cents": False},
            ),
            ("еден денар, еден ден", 1.01, "MKD", {}),
            ("минус три денари, нула дени", -3.0, "MKD", {}),
            ("три денари, три дени", 3.03, "MKD", {}),
            ("седум денари, четириесет дени", 7.4, "MKD", {}),
            ("триесет и еден денар, дваесет и седум дени", 31.27, "MKD", {}),
            (
                "минус сто и единаесет денари, шеесет и седум дени",
                -111.67,
                "MKD",
                {},
            ),
            (
                "десет илјади двесте и десет денари и триесет и четири дени",
                10_210.34,
                "MKD",
                {"separator": " и"},
            ),
            (
                "милион двесте педесет и една илјада "
                "деветстотини осумдесет и пет денари, 1 ден",
                1_251_985.01,
                "MKD",
                {"cents": False},
            ),
            ("пет долари, еден цент", 5.01, "USD", {}),
            ("шест долари, нула центи", 6.0, "USD", {}),
            ("минус седум долари, два центи", -7.021, "USD", {}),
            ("седум долари, четириесет центи", 7.4, "USD", {}),
            ("дваесет и четири долари, шеесет и пет центи", 24.65, "USD", {}),
            ("минус осумдесет долари, шеесет и пет центи", -80.65, "USD", {}),
            (
                "единаесет илјади петстотини и шеесет долари и "
                "осумдесет и седум центи",
                11560.87,
                "USD",
                {"separator": " и"},
            ),
            (
                "сто четириесет и четири илјади "
                "седумстотини шеесет и осум долари, 84 центи",
                144768.84,
                "USD",
                {"cents": False},
            ),
        ]

        for expected, number, currency, kwargs in testcases:
            self.assertEqual(
                expected,
                num2words(
                    number,
                    lang="mk",
                    to="currency",
                    currency=currency,
                    **kwargs,
                ),
            )

    # def test_bounds(self):
        #cardinal size, negative size

        #ordinal, ord_num, year
        #size, zero, float, negative
            
        # bad currency